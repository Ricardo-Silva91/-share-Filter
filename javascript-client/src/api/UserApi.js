/**
 * Shario REST API
 * API for share-thread-filter REST Server
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddKeywordReq', 'model/Error', 'model/LoginInfo', 'model/LoginRes', 'model/OkRes', 'model/Thread', 'model/Threads'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddKeywordReq'), require('../model/Error'), require('../model/LoginInfo'), require('../model/LoginRes'), require('../model/OkRes'), require('../model/Thread'), require('../model/Threads'));
  } else {
    // Browser globals (root is window)
    if (!root.SharioRestApi) {
      root.SharioRestApi = {};
    }
    root.SharioRestApi.UserApi = factory(root.SharioRestApi.ApiClient, root.SharioRestApi.AddKeywordReq, root.SharioRestApi.Error, root.SharioRestApi.LoginInfo, root.SharioRestApi.LoginRes, root.SharioRestApi.OkRes, root.SharioRestApi.Thread, root.SharioRestApi.Threads);
  }
}(this, function(ApiClient, AddKeywordReq, Error, LoginInfo, LoginRes, OkRes, Thread, Threads) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 0.0.0
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addKeywordPOST operation.
     * @callback module:api/UserApi~addKeywordPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OkRes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * new keyword
     * Adds a new keyword to the key list.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddKeywordReq} opts.body request.
     * @param {module:api/UserApi~addKeywordPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OkRes}
     */
    this.addKeywordPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OkRes;

      return this.apiClient.callApi(
        '/addKeyword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginPOST operation.
     * @callback module:api/UserApi~loginPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginRes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * login
     * user sends credentials and gets token.
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginInfo} opts.body request.
     * @param {module:api/UserApi~loginPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginRes}
     */
    this.loginPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LoginRes;

      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the threadGET operation.
     * @callback module:api/UserApi~threadGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Thread} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get Thread by id
     * get one thread from the server, by id. 
     * @param {String} token The user&#39;s token
     * @param {String} threadId The thread&#39;s id
     * @param {module:api/UserApi~threadGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Thread}
     */
    this.threadGET = function(token, threadId, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling threadGET");
      }

      // verify the required parameter 'threadId' is set
      if (threadId == undefined || threadId == null) {
        throw new Error("Missing the required parameter 'threadId' when calling threadGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token,
        'threadId': threadId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Thread;

      return this.apiClient.callApi(
        '/getThread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the threadsDateGET operation.
     * @callback module:api/UserApi~threadsDateGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Threads} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get Threads after a date
     * get threads from the server, starting from given date. 
     * @param {String} token The user&#39;s token
     * @param {String} _date The date
     * @param {module:api/UserApi~threadsDateGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Threads}
     */
    this.threadsDateGET = function(token, _date, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling threadsDateGET");
      }

      // verify the required parameter '_date' is set
      if (_date == undefined || _date == null) {
        throw new Error("Missing the required parameter '_date' when calling threadsDateGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token,
        'date': _date
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Threads;

      return this.apiClient.callApi(
        '/getThreadsAfter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the threadsGET operation.
     * @callback module:api/UserApi~threadsGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Threads} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get All Threads
     * get every thread in the server 
     * @param {String} token The user&#39;s token
     * @param {module:api/UserApi~threadsGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Threads}
     */
    this.threadsGET = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling threadsGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Threads;

      return this.apiClient.callApi(
        '/getThreads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
