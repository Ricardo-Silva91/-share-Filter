/**
 * Shario REST API
 * API for share-thread-filter REST Server
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddKeywordReq', 'model/Error', 'model/LoginInfo', 'model/LoginRes', 'model/OkRes', 'model/Post', 'model/Thread', 'model/Threads', 'api/PublicApi', 'api/UserApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/AddKeywordReq'), require('./model/Error'), require('./model/LoginInfo'), require('./model/LoginRes'), require('./model/OkRes'), require('./model/Post'), require('./model/Thread'), require('./model/Threads'), require('./api/PublicApi'), require('./api/UserApi'));
  }
}(function(ApiClient, AddKeywordReq, Error, LoginInfo, LoginRes, OkRes, Post, Thread, Threads, PublicApi, UserApi) {
  'use strict';

  /**
   * API_for_share_thread_filter_REST_Server.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var SharioRestApi = require('index'); // See note below*.
   * var xxxSvc = new SharioRestApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new SharioRestApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new SharioRestApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new SharioRestApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AddKeywordReq model constructor.
     * @property {module:model/AddKeywordReq}
     */
    AddKeywordReq: AddKeywordReq,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The LoginInfo model constructor.
     * @property {module:model/LoginInfo}
     */
    LoginInfo: LoginInfo,
    /**
     * The LoginRes model constructor.
     * @property {module:model/LoginRes}
     */
    LoginRes: LoginRes,
    /**
     * The OkRes model constructor.
     * @property {module:model/OkRes}
     */
    OkRes: OkRes,
    /**
     * The Post model constructor.
     * @property {module:model/Post}
     */
    Post: Post,
    /**
     * The Thread model constructor.
     * @property {module:model/Thread}
     */
    Thread: Thread,
    /**
     * The Threads model constructor.
     * @property {module:model/Threads}
     */
    Threads: Threads,
    /**
     * The PublicApi service constructor.
     * @property {module:api/PublicApi}
     */
    PublicApi: PublicApi,
    /**
     * The UserApi service constructor.
     * @property {module:api/UserApi}
     */
    UserApi: UserApi
  };

  return exports;
}));
